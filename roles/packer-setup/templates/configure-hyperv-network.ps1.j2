$ErrorActionPreference = "Stop"

Function Get-KVPDict($xml) {
    $deserializer = [Microsoft.Management.Infrastructure.Serialization.CimDeserializer]::Create()
    $expected_classes = [Microsoft.Management.Infrastructure.CimClass[]]@(
        Get-CimClass -Namespace root\virtualization\v2 -ClassName Msvm_KvpExchangeDataItem
    )

    $bytes = [System.Text.Encoding]::Unicode.GetBytes($xml)
    $cim_instance = $deserializer.DeserializeInstance($bytes, [ref]0, $expected_classes)
    $result = @{}
    foreach ($prop in $cim_instance.CimInstanceProperties) {
        $result.$($prop.Name) = $prop.Value
    }	

    return ,$result
}

Function Get-VMIPAddress($vm_name) {
    $adapter = Get-VMNetworkAdapter -VMName $vm_name -ErrorAction SilentlyContinue
    if ($adapter.IPAddresses) {
        $ip = $adapter.IPAddresses[0]
    } else {
        $vm = Get-CimInstance -ClassName Msvm_ComputerSystem -Namespace root\virtualization\v2 -Filter "ElementName='$vm_name'"
        $exchange_items = (Get-CimAssociatedInstance -InputObject $vm -ResultClassName Msvm_KvpExchangeComponent).GuestIntrinsicExchangeItems | ForEach-Object { Get-KVPDict -xml $_ }
        $ip_addresses = ($exchange_items | Where-Object { $_.Name -eq "NetworkAddressIPv4" }).Value
        $ip = ($ip_addresses -split ";")[0]
    }

    return $ip
}

$inventory_file = "$PSScriptRoot\hosts.ini"
$vm_name = '{{pri_packer_setup_builders.vm_name}}'

Write-Host "Attempting to get IP Address of VM: $vm_name"
$ip_address = Get-VMIPAddress -vm_name $vm_name
Write-Host "Found IP Address of VM: $ip_address"

Write-Host "Configuring Ansible inventory file to use VM IP"
$contents = Get-Content -Path $inventory_file
$contents = $contents -replace "ansible_host=.*$", "ansible_host=$ip_address"
Set-Content -Path $inventory_file -Value $contents
